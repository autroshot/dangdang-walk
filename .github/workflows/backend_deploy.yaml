name: Backend Deploy

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"

env:
  IMAGE: dangdang-api
  CONTAINER_GREEN: dangdang-api-green
  CONTAINER_BLUE: dangdang-api-blue
  REPO: 180993267331.dkr.ecr.ap-northeast-2.amazonaws.com
  TAG: ${GITHUB_SHA::7}
  EC2_SSH_USER: ubuntu

jobs:
  build:
    name: ECR Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup Node.js
        uses: actions/setup-node@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('backend/package-lock.json') }}
      - name: Install Dependencies
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        run: npm ci
      - name: Run build
        run: npm run build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Docker build
        run: |
          docker build --platform linux/amd64 -t ${{ env.IMAGE }} --target prod .
      - name: ECR push
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ env.REPO }}
          docker tag ${{ env.IMAGE }} ${{ env.REPO }}/${{ env.IMAGE }}:${{ env.TAG }}
          docker push ${{ env.REPO }}/${{ env.IMAGE}}:${{ env.TAG }}
  deploy:
    name: ECR Deploy
    needs: build
    runs-on: [ self-hosted, label-api ]
    steps:
      - name: Create .env
        env:
          ENV_FILE: ${{ secrets.ENV_FILE_BACKEND }}
        run: |
          if [ ! -d "backend" ]; then 
            mkdir backend;  
          fi
          echo "$ENV_FILE" > ./backend/.env.prod
      - name: Deploy to Amazon EC2
        run : | 
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ env.REPO }}
    
          IS_BLUE_RUNNING=$(docker inspect -f '{{ .State.Status }}' ${{ env.CONTAINER_BLUE }} | grep running)
          
          if [ -n "$IS_BLUE_RUNNING" ]; then
            echo "Green 배포를 시작합니다."
          
            docker stop ${{ env.CONTAINER_GREEN }} && docker rm ${{ env.CONTAINER_GREEN }}
            docker run -d --name ${{ env.CONTAINER_GREEN }} --restart always -p 3031:3031 --env-file ./backend/.env.prod ${{ env.REPO }}/${{ env.IMAGE }}:${{ env.TAG }}
          
            while [ 1 = 1 ]; do
              echo "Green Health check를 시작합니다."
            sleep 3
           
            REQUEST=$(curl http://localhost:3031)
              if [ -n "$REQUEST" ]; then
                echo "Green Health check 성공했습니다."
                break ;
              fi
            done;
          
            echo "Nginx를 재시작합니다."
            sudo nginx -s reload
          
            echo "Green Container 종료합니다."
            docker stop ${{ env.CONTAINER_BLUE }}
          
            echo "Green 배포를 성공적으로 종료합니다."
          else
            echo "Blue 배포를 시작합니다."
            
            docker stop ${{ env.CONTAINER_BLUE }} && docker rm ${{ env.CONTAINER_BLUE }}
            docker run -d --name ${{ env.CONTAINER_BLUE }} --restart always -p 3032:3031 --env-file ./backend/.env.prod ${{ env.REPO }}/${{ env.IMAGE }}:${{ env.TAG }}
            
            while [ 1 = 1 ]; do
              echo "Blue Health check를 시작합니다."
            sleep 3
            
            REQUEST=$(curl http://localhost:3032)
              if [ -n "$REQUEST" ]; then
                echo "Blue Health check 성공했습니다."
                break ;
              fi
            done;
            
            echo "Nginx를 재시작합니다."
            sudo nginx -s reload
            
            echo "Blue Container 종료합니다."
            docker stop ${{ env.CONTAINER_GREEN }}
            
            echo "Blue 배포를 성공적으로 종료합니다."
          fi
          sleep 3
          
          echo "이전 이미지를 삭제합니다."
          docker image prune -af
          
          exit 1
