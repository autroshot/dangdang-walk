openapi: 3.0.3
info:
  title: DangDang-Walk API
  version: 1.0.0
components:
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - Authorization: []
servers:
  - url: http://localhost:3333
    description: local 환경 server
  - url: https://dangdang-walk.prgms-fullcycle.com/
    description: production 환경 server
paths:
  /health:
    get:
      summary: health check
      description: client(frontend)와 server(backend) 간의 연결 상태를 확인한다. Docker health check에도 사용된다.
      security: []
      responses:
        200:
          description: OK

  /auth/login:
    post:
      security: []
      tags:
        - 회원
      summary: 로그인
      description: 사용자가 우리 서비스의 회원이면 로그인 처리를 하고 access token 및 만료 시간, refresh token, 로그인 여부를 반환한다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                authorizeCode:
                  type: string
                  description: OAuth 로그인 시 발급받은 인가 코드
                provider:
                  type: string
                  description: OAuth 로그인 제공자
                  enum:
                    - google
                    - kakao
                    - naver
              required:
                - authorizeCode
                - provider
      responses:
        "200":
          description: 회원인 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
          headers:
            Set-Cookie:
              description: 사용자의 로그인 cookie
              schema:
                type: string
                example: "refreshToken=xxxxx.yyyyy.zzzzz;\nisLoggedIn=true;\nexpiresIn=3600000"
        "404":
          description: 회원이 아닌 경우
          headers:
            Set-Cookie:
              description: 사용자의 OAuth 로그인 cookie
              schema:
                type: string
                example: "oauthRefreshToken=xxxxx.yyyyy.zzzzz;\noauthAccessToken=xxxxx.yyyyy.zzzzz;\noauthId=12345;\nprovider=google"
  /auth/signup:
    post:
      tags:
        - 회원
      summary: 회원가입
      description: 사용자가 우리 서비스의 회원이 아니면 회원가입 처리를 하고 access token 및 만료 시간, refresh token, 로그인 여부를 반환한다.
      security: []
      parameters:
        - in: cookie
          name: OAuth Cookie
          required: true
          description: 로그인 실패 시 설정된 사용자의 OAuth 로그인 cookie
          schema:
            type: string
            example: "oauthRefreshToken=xxxxx.yyyyy.zzzzz;\noauthAccessToken=xxxxx.yyyyy.zzzzz;\noauthId=12345;\nprovider=google"
      responses:
        "201":
          description: 회원이 아닌 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
          headers:
            Set-Cookie:
              description: 사용자의 로그인 cookie
              schema:
                type: string
                example: "refreshToken=xxxxx.yyyyy.zzzzz;\nisLoggedIn=true;\nexpiresIn=3600000"
        "401":
          description: OAuth 로그인 cookie가 없는 경우
        "409":
          description: 회원인 경우
  /auth/logout:
    post:
      tags:
        - 회원
      summary: 로그아웃
      description: 회원인 경우 로그아웃 처리를 한다.
      responses:
        "200":
          description: 회원인 경우
        "401":
          description: Authorization header가 없거나 유효한 access token이 아닌 경우
        "404":
          description: 회원을 찾을 수 없는 경우
  /auth/deactivate:
    delete:
      tags:
        - 회원
      summary: 회원탈퇴
      description: 회원인 경우 회원탈퇴 처리를 한다.
      responses:
        "200":
          description: 회원인 경우
        "401":
          description: Authorization header가 없거나 유효한 access token이 아닌 경우
        "404":
          description: 회원을 찾을 수 없는 경우
  /auth/token:
    get:
      tags:
        - 회원
      summary: access token 및 refresh token 재발급
      description: cookie에 유효한 refresh token이 들어있는 경우 access token과 refresh token을 재발급해 반환한다.
      responses:
        "200":
          description: cookie에 담긴 refresh token이 유효한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
          headers:
            Set-Cookie:
              description: refresh token cookie
              schema:
                type: string
                example: "refreshToken=xxxxx.yyyyy.zzzzz;\nisLoggedIn=true;\nexpiresIn=3600000"
        "401":
          description: cookie에 refresh token이 없거나 유효한 refresh token이 아닌 경우
        "404":
          description: 회원을 찾을 수 없는 경우

  /dogs:
    post:
      tags:
        - 강아지
      summary: 강아지 등록
      description: 새로운 강아지 정보를 등록한다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 강아지 이름
                breed:
                  type: string
                  description: 견종
                gender:
                  type: string
                  description: 강아지 성별
                  enum:
                    - MALE
                    - FEMALE
                isNeutered:
                  type: boolean
                  description: 중성화 여부
                birth:
                  type: string
                  description: 강아지 생일
                profilePhotoUrl:
                  type: string
                  description: 강아지 사진 URL
                  example: https://path/to/profile-photo
              required:
                - name
                - breed
                - gender
                - isNeutered
                - birth
                - profilePhotoUrl
      responses:
        "201":
          description: 강아지가 정상적으로 등록된 경우
          content:
            text/plain:
              schema:
                type: boolean
                example: true
        "401":
          description: Authorization header가 없거나 유효한 access token이 아닌 경우
        "404":
          description: 회원을 찾을 수 없는 경우
  /dogs/{id}:
    get:
      tags:
        - 강아지
      summary: 강아지 프로필 조회
      description: 강아지 정보를 조회한다.
      responses:
        "200":
          description: 강아지 정보가 정상적으로 수정된 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    description: 강아지 id
                  name:
                    type: string
                    description: 강아지 이름
                  breed:
                    type: string
                    description: 견종
                  gender:
                    type: string
                    description: 강아지 성별
                    enum:
                      - MALE
                      - FEMALE
                  isNeutered:
                    type: boolean
                    description: 중성화 여부
                  birth:
                    type: string
                    description: 강아지 생일
                  profilePhotoUrl:
                    type: string
                    description: 강아지 사진 URL
                    example: https://path/to/profile-photo
        "401":
          description: Authorization header가 없거나 유효한 access token이 아닌 경우
        "403":
          description: 회원이 소유한 강아지가 아닌 경우
        "404":
          description: 회원 또는 강아지를 찾을 수 없는 경우
    patch:
      tags:
        - 강아지
      summary: 강아지 정보 수정
      description: 강아지 정보를 수정한다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 강아지 이름
                breed:
                  type: string
                  description: 견종
                gender:
                  type: string
                  description: 강아지 성별
                  enum:
                    - MALE
                    - FEMALE
                isNeutered:
                  type: boolean
                  description: 중성화 여부
                birth:
                  type: string
                  description: 강아지 생일
                profilePhotoUrl:
                  type: string
                  description: 강아지 사진 URL
                  example: https://path/to/profile-photo
              required:
                - name
                - breed
                - gender
                - isNeutered
                - birth
                - profilePhotoUrl
      responses:
        "204":
          description: 강아지 정보가 정상적으로 수정된 경우
          content:
            text/plain:
              schema:
                type: boolean
                example: true
        "401":
          description: Authorization header가 없거나 유효한 access token이 아닌 경우
        "403":
          description: 회원이 소유한 강아지가 아닌 경우
        "404":
          description: 회원 또는 강아지를 찾을 수 없는 경우
    delete:
      tags:
        - 강아지
      summary: 강아지 삭제
      description: 강아지 정보를 삭제한다.
      responses:
        "204":
          description: 강아지가 정상적으로 삭제된 경우
          content:
            text/plain:
              schema:
                type: boolean
                example: true
        "401":
          description: Authorization header가 없거나 유효한 access token이 아닌 경우
        "403":
          description: 회원이 소유한 강아지가 아닌 경우
        "404":
          description: 회원 또는 강아지를 찾을 수 없는 경우
  /dogs/walk-available:
    get:
      tags:
        - 강아지
      summary: 산책 가능한 강아지 목록 조회
      description: 산책 가능한 강아지 목록을 조회한다.
      responses:
        "200":
          description: 산책 가능한 강아지 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                      description: 강아지 id
                    name:
                      type: string
                      description: 강아지 이름
                    profilePhotoUrl:
                      type: string
                      description: 강아지 사진 URL
                      example: https://path/to/profile-photo
        "401":
          description: Authorization header가 없거나 유효한 access token이 아닌 경우
        "404":
          description: 회원을 찾을 수 없는 경우
  /dogs/statistics:
    get:
      tags:
        - 강아지
      summary: 강아지 정보 및 일주일 산책 현황
      description: 강아지 정보와 강아지의 일주일 산책 현황 목록을 조회한다.
      responses:
        "200":
          description: 강아지 정보와 강아지의 일주일 산책 현황 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                      description: 강아지 id
                    name:
                      type: string
                      description: 강아지 이름
                    profilePhotoUrl:
                      type: string
                      description: 강아지 사진 URL
                      example: https://path/to/profile-photo
                    recommendedDailyWalkAmount:
                      type: number
                      description: 하루 권장 산책량 [s]
                      example: 3600
                    dailyWalkAmount:
                      type: number
                      description: 하루 산책량
                      example: 1800
                    weeklyWalks:
                      type: array
                      description: 한 주간 산책 횟수 (요일별)
                      items:
                        type: number
                      minItems: 7
                      maxItems: 7
                      example: [0, 1, 2, 0, 0, 0, 1]

        "401":
          description: Authorization header가 없거나 유효한 access token이 아닌 경우
        "404":
          description: 회원을 찾을 수 없는 경우
